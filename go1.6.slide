Go 1.6 Release Party
goMAD
17 Feb 2016

Adam Williams
@ac5w

* Sources

- http://talks.godoc.org/github.com/davecheney/gosyd/go1.6.slide
Adapted from the go Sydney user group presentation (That presentation is based _heavily_ on the [[http://tip.golang.org/doc/go1.6][official Go 1.6 release notes]]):

- https://talks.golang.org/2016/state-of-go.slide
Francesc Campoy's presentation _State_of_Go_ talk at FOSDEM

* Welcome

Today (Feb 17th) is an attempt at a release party for Go 1.6 involving as many Go user groups as possible.

.image go1.6/Go_release_party_1.6_wide.png _ 600
.caption Frédéric Menez - Digikong.io

* The Go project by the numbers

Go was announced as an open source project November 10th, 2009.

Releases occur every ~6 months, with several bug fix point releases between each major release.

Release timeline:

- [[http://blog.golang.org/the-path-to-go-1][Go 1.0]] released 28th March, 2012
- [[http://talks.golang.org/2013/go1.1.slide#1][Go 1.1]] released 13th May, 2013
- Go 1.2 released 1st December, 2013
- Go 1.3 released 18th June, 2014
- Go 1.4 released 10th December, 2014
- [[https://talks.golang.org/2015/state-of-go.slide#8][Go 1.5]] released 19th August, 2015
- Go 1.6 is expected to be released February, 2016

* Go 1.6

The latest Go release, version 1.6, arrives six months after 1.5.

* Changes 1.5.x -> 1.6

- Language
- Platforms
- Tooling
- Runtime
- Standard Library

* Changes to the language

* Changes to the language

None.

This is a feature.

_-_ https://talks.golang.org/2016/state-of-go.slide#6

* Changes to the language

Most of its changes are in the implementation of the language, runtime, and libraries. There are no changes to the language specification.

As always, the release maintains the [[http://tip.golang.org/doc/go1compat.html][Go 1 compatibility guarantee]].

    "It is intended that programs written to the Go 1 specification will continue to compile
    and run correctly, unchanged, over the lifetime of that specification. At some indefinite
    point, a Go 2 specification may arise, but until that time, Go programs that work today
    should continue to work even as future "point" releases of Go 1 arise (Go 1.1, Go 1.2, etc.).

    The APIs may grow, acquiring new packages and features, but not in a way that
    breaks existing Go 1 code."



Almost all Go programs are expected to continue to compile and run as before.

* Platforms

* New Ports in 1.6

- Adds experimental ports to Linux on 64-bit MIPS (linux/mips64 and linux/mips64le). These ports support cgo but only with internal linking. Note that this is 64 bit MIPS, not the older 32 bit MIPS commonly found in routers.

- Adds an experimental port to Android on 32-bit x86 (android/386).

- On FreeBSD, Go 1.6 defaults to using clang, not gcc, as the external C compiler.

- On Linux on little-endian 64-bit PowerPC (linux/ppc64le), Go 1.6 now supports cgo with external linking and is roughly feature complete.

- On NaCl, Go 1.5 required SDK version pepper-41. Go 1.6 adds support for later SDK versions.

* Supported Platforms

Go 1.6 supports the following operating systems:

- Windows, OSX (darwin), Android, iOS, NaCl, DragonflyBSD, FreeBSD, Linux, NetBSD, OpenBSD, Plan 9, Solaris/Illumos

Go 1.6 supports the following CPU architectures:

- Intel (386 and amd64), arm (ARMv5, v6, v7), arm64, 64 bit PowerPC (big and little endian), 64 bit MIPS (big and little endian)

In the future:

- s390x (IBM Z series) planned for Go 1.7
- RISC-V may be on the horizon

* Tooling

* Tooling - cgo

Cgo enables the creation of Go packages that call C code.

.image go1.6/appenginegopher.jpg _ 600
.caption https://golang.org/doc/gopher/appenginegopher.jpg

* Tooling - cgo

The major change is the definition of rules for sharing Go pointers with C code, to ensure that such C code can coexist with Go's garbage collector.

Go and C may share memory allocated by Go when

- a pointer to that memory is passed to C as part of a cgo call,
- and provided that the memory itself contains no pointers to Go-allocated memory,
- and provided that C does not retain the pointer after the call returns.

These rules are checked by the runtime during program execution: if the runtime detects a violation, it prints a diagnosis and crashes the program.

The checks can be disabled by setting the environment variable `GODEBUG=cgocheck=0`, but note that disabling the checks will typically only lead to more mysterious failure modes.

Fixing the code in question should be strongly preferred over turning off the checks.

* Tooling - cgo

.play go1.6/cgo.go

* Tooling - parser

Externally the compiler toolchain is mostly unchanged compared to Go 1.5.

Internally, the most significant change is that the parser is now hand-written instead of generated from yacc.

Removes

  //go:generate go tool yacc go.y

* Tooling - linker

In Go 1.5 the linker's -X flag changed.

In Go 1.4 and earlier, it took two arguments, as in

    -X importpath.name value

Go 1.5 added an alternative syntax using a single argument that is itself a name=value pair:

    -X importpath.name=value

In Go 1.5 the old syntax was still accepted, after printing a warning suggesting use of the new syntax instead. Go 1.6 continues to accept the old syntax and print the warning. Go 1.7 will remove support for the old syntax.

* Tooling - linker

    package main

    import "fmt"

    var Version = "No Version Provided"

    func main() {
        fmt.Printf("App Version: %s\n", Version)
    }

Set when compiling:

    go build -ldflags "-X main.Version 1.2.3" // BAD
    go build -ldflags "-X main.Version=1.2.3" // GOOD

* Tooling - go

GO15VENDOREXPERIMENT is now enabled by default.

Go 1.5 introduced experimental support for vendoring, enabled by setting the `GO15VENDOREXPERIMENT` environment variable to 1

    GO15VENDOREXPERIMENT=1 go build // 1.5 vendoring disabled by default

Go 1.6 keeps the vendoring support, no longer considered experimental, and enables it by default.

    go build                        // 1.6 vendoring enabled by default

In Go 1.7, the environment variable will stop having any effect.

* Tooling - go

How does _vendoring_ work?

	/home/user/
	    src/
	        server-one/
	            main.go            (import "github.com/gorilla/mux")
	        server-two/
	            main.go            (import "github.com/gorilla/mux")
	            vendor/
	                github.com/
	                    gorilla/
	                        mux/
	                            ...

`server-one` uses the `mux` package in `$GOPATH/src/github.com/gorilla/mux`.

`server-two` uses the `mux` package in `vendor`.

More subtle cases exist. See [[https://golang.org/s/go15vendor]] for more info.

* Tooling - go doc

Usage:

    go doc [-u] [-c] [package|[package.]symbol[.method]]

Doc prints the documentation comments associated with the item identified by its arguments (a package, const, func, type, var, or method) followed by a one-line summary of each of the first-level items "under" that item (package-level declarations for a package, methods for a type, etc.).

* Tooling - go doc

Go 1.5 added the possibility of searching by name

	go doc math Pi

Go 1.6 defines priority of packages with import paths with less elements.

An important effect of this change is that *original* copies of packages are now *preferred* over *vendored* copies. Successful searches also tend to run faster.

* Runtime

* Standard Library

* Standard Library - HTTP/2

- TODO

* Standard Library - Template

- TODO

* Standard Library - Sort


* Cross compilation

As of Go 1.5, you no longer need to 'bless' your Go install before cross compiling—it just works*.

    # cross compile from your machine to Windows
    env GOOS=windows go build $YOURPACKAGE

This works with the binary release from the [[https://golang.org/dl/][golang.org]].

Read more:

- [[http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5][Cross compilation with Go 1.5]]
- [[https://medium.com/@rakyll/go-1-5-cross-compilation-488092ba44ec#.7wrgy0a5s][Go 1.5: Cross compilation]]

_*_Unless_your_code_uses_cgo_

* Garbage collector improvements

Go 1.5 introduced a low latency garbage collector.

The new collector trades throughput for reduced latency.

Allocations pay (in terms of time) a little up front to reduce the time taken to clean up later, this reduces the overall time the gc has to stop the world.

For Go 1.6, a lot of work went into optimizing and tuning the gc, enabling far larger heaps to be managed within the 10ms latency goal.

* Go 1.5

At [[https://www.youtube.com/watch?v=aiv1JOfMjm0][GopherCon 2015 Rick Hudson gave a presentation]] about the Go 1.5 low latency collector

.image go1.6/go15.png 400 _

* Go 1.6

At [[http://www.infoq.com/presentations/go-gc-performance][QCon SF in November Rick Hudson]] gave an updated presentation which showed this comparison of Go 1.5 to the upcoming Go 1.6

.image go1.6/go16.png 400 _

_Yes,_that_is_gigabytes_on_the_X_axis_

* HTTP/2

Go 1.6 adds transparent support in the `net/http` package for the new HTTP/2 protocol.

Go clients and servers will automatically use HTTP/2 as appropriate when using HTTPS.

Programs that must disable HTTP/2 can do so by setting `Transport.TLSNextProto` (for clients) or `Server.TLSNextProto` (for servers) to a non-nil, empty map.

Read more

- [[https://http2.golang.org/][HTTP/2 demo site]] (powered by Go)
- [[https://www.youtube.com/watch?v=gukAZO1fqZQ][Here is a video of Brad Fitzpatrick giving an overview of Go 1.6's HTTP/2 support]] at the London Go Gathering in 2015.

* HTTP/2 (cont.)

HTTP/1.1 has been in use for 15+ years (June 1999).

Why HTTP/2?

* Sprites

.video go1.6/sprite-demo.mp4 video/mp4 400 600

TODO: Example

Why make 1 single image and not use individual images?

HTTP/2

- Same high level concepts:
- Methods (GET, POST, PUT, ...), Status Codes (404, 200, ...), Headers (Content-Type, ...), URIs.


* maps panic if you misuse them

The runtime has added lightweight, best-effort detection of concurrent misuse of maps.

If the runtime detects this condition, it prints a diagnosis and crashes the program.

    fatal error: concurrent map writes

    goroutine 2726 [running]:
    runtime.throw(0x192d630, 0x15)
        /usr/lib/go/src/runtime/panic.go:530 +0x90 fp=0xc8202eb838 sp=0xc8202eb820

The best way to find out more about the problem is to run the program under the race detector.

* Panic messages are shorter by default

For program-ending panics, the runtime now by default prints _only_the_stack_of_the_running_goroutine_, not all existing goroutines.

Usually only the current goroutine is relevant to a panic, so omitting the others significantly reduces irrelevant output in a crash message.

To see the stacks from all goroutines in crash messages, set the environment variable `GOTRACEBACK` to all or call `debug.SetTraceback` before the crash, and rerun the program.

    env GOTRACEBACK=all ./crashy

Read more:

- [[http://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables#GOTRACEBACK][A whirlwind tour of Go’s runtime environment variables]]

* Windows timer resolution

On Windows, Go programs in Go 1.5 and earlier forced the global Windows timer resolution to 1ms at startup by calling `timeBeginPeriod(1)`.

Go 1.6 no longer needs this for good scheduler performance, and changing the global timer resolution caused problems on some systems, so the call has been removed.

* Vendor support

Go 1.5 introduced experimental support for vendoring, enabled by setting the `GO15VENDOREXPERIMENT` environment variable to 1

Go 1.6 keeps the vendoring support, no longer considered experimental, and enables it by default.

It can be disabled explicitly by setting the GO15VENDOREXPERIMENT environment variable to 0. Go 1.7 will remove support for the environment variable.

The most likely problem caused by enabling vendoring by default happens in source trees containing an existing directory named vendor that does not expect to be interpreted according to new vendoring semantics. In this case, the simplest fix is to rename the directory to anything other than vendor and update any affected import paths.

* Vendoring example

TODO: WRITE EXAMPLE

* Vendored code matches ./...

If you're used to doing

   % cd $GOPATH/github.com/you/repo
   % go test ./...

Be aware that vendored packages, like

   $GOPATH/github.com/you/repo/vendor/github.com/them/repo

Will match the go tool glob operator `...`, and probably cause the test to fail.

The workaround is to filter out vendored packages by name

   go test $(go list ./... | grep -v /vendor/)

Read More

- [[https://github.com/golang/go/issues/11659#issuecomment-171678025][Issue 11659]]

* LLVM memory sanitizer, -msan

The compiler, linker, and go command have new flag `-msan`, analogous to `-race` that enables interoperation with the Clang MemorySanitizer.

Such interoperation useful mainly for testing a program containing suspect C or C++ code.

    go build -msan $YOURCOMMAND

This should probably be considered _experimental_ and only available on linux/amd64.

* Shared library support

TODO: SHOW EXAMPLE OF COMPILING USING SHARED LIBRARIES

_note:_ dynamic loading of code at run time (plugins) is still not supported.

* Performance

On average the programs in the Go 1 benchmark suite run a few percent faster in Go 1.6 than they did in Go 1.5.

The garbage collector's pauses are even lower than in Go 1.5, although the effect is likely only noticeable for programs using a large amount of memory.

There have been significant optimizations bringing more than 10% improvements to implementations of the compress/bzip2, compress/gzip, crypto/aes, crypto/elliptic, crypto/ecdsa, and sort packages.

* Sorting

In the sort package, the implementation of `Sort` has been rewritten to make about 10% fewer calls to the Interface's `Less` and `Swap` methods.

The new algorithm does choose a different ordering than before for values that compare equal (those pairs for which `Less(i,`j)` and `Less(j,`i)` are false).

The definition of `Sort` makes no guarantee about the final order of _equal_values_, the new behavior may break programs that expect a specific order.

Such programs should either refine their Less implementations to report the desired order or should switch to `sort.Stable`, which preserves the original input order of equal values.

* Stripping whitespace with text/template

It is now possible to trim spaces around template actions, which can make template definitions more readable.

A minus sign at the beginning of an action says to trim space before the action, and a minus sign at the end of an action says to trim space after the action.

.play go1.6/template.go

* {{block}} action

The new {{block}} action, combined with allowing redefinition of named templates, provides a simple way to define pieces of a template that can be replaced in different instantiations.

For example, the template below defines the basic formatting of a web page:

    <title>{{block "title"}}Page Title{{end}}</title>
    <body>
    <h1>{{template "title"}}</h1>
    {{block "page"}}Main text{{end}}

A program can then overlay that template with new definitions for the "title" and "page" blocks to reuse the formatting for another page.

* Go vet command

The go vet command now diagnoses passing function or method values as arguments to Printf, such as when passing f where f() was intended.

.code go1.6/vet.go

* Gccgo

The release schedules for the GCC and Go projects do not coincide.

GCC release 5 contains the Go 1.4 version of gccgo.

The next release, GCC 6, will have the Go 1.5 version of gccgo.

Due to release scheduling, it is likely that Go 1.6 will not be in a GCC release until GCC 7.

* Minor standard library changes

As well as the big improvements mentioned above, the standard library received many bug fixes and minor improvements.

This section highlights a few of these changes.

Read more

- [[https://tip.golang.org/doc/go1.6#minor_library_changes][Go 1.6 release notes]]

* archive/tar

Joe Tsai has put a lot of effort into the archive/tar package, correcting many bugs in rare corner cases of the file format.

One visible change is that the Reader type's Read method now presents the content of special file types as being empty, returning io.EOF immediately.

* bufio

The bufio package's Scanner type now has a Buffer method, to specify an initial buffer and maximum buffer size to use during scanning.

This makes it possible, when needed, to scan tokens larger than MaxScanTokenSize.

Also for the Scanner, the package now defines the ErrFinalToken error value, for use by split functions to abort processing or to return a final empty token.

TODO: ADD EXAMPLE

* net/* changes

The net/http package has a number of minor additions beyond the HTTP/2 support already discussed.

- The FileServer now sorts its generated directory listings by file name.
- The Client now allows user code to set the Expect: 100-continue header (see Transport.ExpectContinueTimeout).
- There are four new error codes from RFC 6585: StatusPreconditionRequired (428), StatusTooManyRequests (429), StatusRequestHeaderFieldsTooLarge (431), and StatusNetworkAuthenticationRequired (511).
- The implementation and documentation of CloseNotifier has been substantially changed. The Hijacker interface now works correctly on connections that have previously been used with CloseNotifier. The documentation now describes when CloseNotifier is expected to work.

* net/* changes (cont.)
- The net/http/httptest package's ResponseRecorder now initializes a default Content-Type header using the same content-sniffing algorithm as in http.Server.
- The net/url package's Parse is now stricter and more spec-compliant regarding the parsing of host names. For example, spaces in the host name are no longer accepted.
- net/url.Error type now implements net.Error.

* GODEBUG=netdns

The `net` package implements two DNS resolvers

- cgo based resolver which uses the platform's dns resolver
- the so called "pure Go" DNS resolver

The former is the default when not cross compiling, the latter is enabled exclusively when cross compiling.

For "native" builds, you can control this setting with

    export GODEBUG=netdns=go    # force pure Go resolver
    export GODEBUG=netdns=cgo   # force cgo resolver

Read more

- [[https://golang.org/pkg/net/#hdr-Name_Resolution][Name resolution section]] of the `net` package documentation.

* os

The os package's IsExist, IsNotExist, and IsPermission now return correct results when inquiring about an SyscallError.

This is useful if you have an unknown error value and want

On Unix-like systems, when a write to os.Stdout or os.Stderr (more precisely, an os.File opened for file descriptor 1 or 2) fails due to a broken pipe error, the program will raise a SIGPIPE signal. By default this will cause the program to exit; this may be changed by calling the os/signal Notify function for syscall.SIGPIPE. A write to a broken pipe on a file descriptor other 1 or 2 will simply return syscall.EPIPE (possibly wrapped in os.PathError and/or os.SyscallError) to the caller.

The old behavior of raising an uncatchable SIGPIPE signal after 10 consecutive writes to a broken pipe no longer occurs.

TODO: WRITE EXAMPLE

* regexp

In the regexp package, the Regexp type has always been safe for use by concurrent goroutines.

Some high-concurrency servers using the same Regexp from many goroutines have seen degraded performance due to contention on a mutex protecting a cache of scratch spaces used during regular expression searches.

To help such servers, Regexp now has a Copy method, which makes a copy of a Regexp that shares most of the structure of the original but has its own scratch space cache.

    re1 := regexp.MustCompile(`^(?P<root>github\.com/([A-Za-z0-9_.\-]+/[A-Za-z0-9_.\-]+))(/[A-Za-z0-9_.\-]+)*$`)
    re2 := re1.Copy()

A copy does have additional space overhead, so Copy should only be used when contention has been observed.

* time

The time package's Parse function has always rejected any day of month larger than 31, such as January 32.

In Go 1.6, Parse now also rejects February 29 in non-leap years, February 30, February 31, April 31, June 31, September 31, and November 31.

.play go1.6/parse.go


* ¿Cuál es su experiencia con Go?
- _NIGUNA_
- _Se_que_existe_xD_
- _Aun_no_mucha..._
- _Absolutely_nothing._
- _Acabo_de_empezar_a_aprenderlo_en_mi_tiempo_libre,_me_llama_muchísimo_la_atención_:)_
- _Escasa_
- _Lo_básico_
- _just_starting_=)_
- _Experiencia_en_proyectos_personales_pequeños,_experimentos..._
- _Muchas_pruebas,_tutoriales,_videos,_scripting..._nada_en_producción_:(_
- _Ninguna,_me_gustaría_conocer_las_experiencias_de_otros_
- _Poco_

* ¿Cuál es su experiencia con Go?
- _Empecé_a_juguetear_en_2013,_hasta_acabar_en_2015_desarrollando_profesionalmente_Go_full-time._
- _Used_in_production_for_microservices_and_DevOps_tools,_currently_hurdling_more_than_1M_users_per_day_
- _Porté_Go_a_Plan_9_en_la_Raspberry_Pi._He_escrito_un_compilador_de_un_lenguaje_para_enseñanza_(picky)_multiplataforma_usando_go_y_Go_yacc._He_desarrollado_mucho_software_para_los_predecesores_de_Go_(Plan_9,_inferno),_parte_con_los_propios_desarrolladores_de_Go_(recover_con_Russ,_por_ejemplo)._Imparto_clases_de_compiladores_y_sistemas_distribuidos_en_go._

* Fin
.image go1.6/party-gopher.png _ 300
.caption Join the party!!!
